package com.example.control_robot.Controller;

import com.example.control_robot.DTO.JoystickCommandDTO;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.stereotype.Component;
import org.springframework.web.socket.*;

import org.springframework.web.socket.handler.TextWebSocketHandler;

import java.io.IOException;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Component
public class JoystickWebsocketHandler extends TextWebSocketHandler {

    private final Map<String, WebSocketSession> sessions = new ConcurrentHashMap<>();
    private final ObjectMapper mapper = new ObjectMapper();

    @Override
    public void afterConnectionEstablished(WebSocketSession session) {
        String userId = getUserIdFromQuery(session);
        sessions.put(userId, session);
        System.out.println("‚úÖ WebSocket ƒë√£ k·∫øt n·ªëi: userId = " + userId);
    }

    public void sendJsonToClient(String userId, JoystickCommandDTO dto) {
        WebSocketSession session = sessions.get(userId);
        if (session != null && session.isOpen()) {
            try {
                String json = mapper.writeValueAsString(dto);
                session.sendMessage(new TextMessage(json));
                System.out.println("üì§ ƒê√£ g·ª≠i l·ªánh xu·ªëng Pi (userId = " + userId + "): " + json);
            } catch (IOException e) {
                System.err.println("‚ùå L·ªói khi g·ª≠i WebSocket t·ªõi Pi: " + e.getMessage());
            }
        } else {
            System.err.println("‚ö†Ô∏è Kh√¥ng c√≥ session m·ªü v·ªõi Pi (userId = " + userId + ")");
        }
    }


    @Override
    public void handleTextMessage(WebSocketSession session, TextMessage message) throws IOException {
        String json = message.getPayload();

        try {
            JoystickCommandDTO cmd = mapper.readValue(json, JoystickCommandDTO.class);
//            System.out.printf("üì• Nh·∫≠n l·ªánh joystick t·ª´ user %s ‚Üí robot %s | vx=%.3f, vy=%.3f, w=%.3f%n",
//                    cmd.getUserId(), cmd.getDeviceId(), cmd.getVx(), cmd.getVy(), cmd.getW());

            // üëâ G·ª≠i xu·ªëng Raspberry Pi (gi·∫£ s·ª≠ userId l√† "pi1")
            String piUserId = "u1"; // ho·∫∑c tra t·ª´ deviceId ‚Üí PiId
            sendJsonToClient(piUserId, cmd);

        } catch (Exception e) {
            System.err.println("‚ùå L·ªói parse JSON: " + e.getMessage());
            System.err.println("D·ªØ li·ªáu l·ªói: " + json);
        }
    }


    @Override
    public void afterConnectionClosed(WebSocketSession session, CloseStatus status) {
        String userId = getUserIdFromQuery(session);
        sessions.remove(userId);
        System.out.println("‚ùå WebSocket ng·∫Øt k·∫øt n·ªëi: userId = " + userId);
    }

    private String getUserIdFromQuery(WebSocketSession session) {
        String query = session.getUri().getQuery(); // v√≠ d·ª•: "userId=u1"
        if (query != null && query.startsWith("userId=")) {
            return query.substring("userId=".length());
        }
        return "unknown";
    }

    // ‚úÖ G·ª≠i d·ªØ li·ªáu t·ª´ server xu·ªëng client WebSocket
    public void sendToClient(String userId, JoystickCommandDTO command) {
        WebSocketSession session = sessions.get(userId);
        if (session != null && session.isOpen()) {
            try {
                String json = mapper.writeValueAsString(command);
                session.sendMessage(new TextMessage(json));
                System.out.println("üì§ ƒê√£ g·ª≠i d·ªØ li·ªáu xu·ªëng client userId=" + userId + ": " + json);
            } catch (IOException e) {
                System.err.println("‚ùå L·ªói khi g·ª≠i d·ªØ li·ªáu WebSocket: " + e.getMessage());
            }
        } else {
            System.err.println("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y session ƒëang m·ªü cho userId=" + userId);
        }
    }
}
